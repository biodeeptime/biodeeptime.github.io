---
title: Tutorials
subttitle: Using BioDeepTime in analytical code
bibliography: 'bibliography.bib'
format:
  gfm: 
    variant: +yaml_metadata_block
permalink: /tutorials/
layout: page
---


```{r setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(divDyn)
```

The tutorial here represents the absolute basics of using the BioDeepTime database. More elaborate tutorials will be made available on [Evolv-ED](https://www.evolv-ed.net/databases/registry/biodeeptime.html).

Add `toc: true` to the metadata of the .md file for a table of contents.

## The Data

### Download

The BioDeepTime database is made available through the 'chronosphere' research data API. The [R client](https://cran.r-project.org/package=chronosphere) to access data can be installed from the CRAN servers with:


```{r chroninst, message=FALSE, eval=FALSE, echo=TRUE}
install.packages("chronosphere")
install.packages("tidyverse")
```

The most up-to-date version of the denormalized BioDeepTiem database can be accessed with: 

```{r download}
# attach package
library(chronosphere)
library(tidyverse) # for data manipulation

# download data, verbose=FALSE hides the default chatter 
bdt <- fetch("biodeeptime", verbose=FALSE)
```

Note that this table is rather large and might take a bit of time to load. The accessible data items can be downloaded with (`datasets("biodeeptime")`).

### Structure

The default representation of the denormalized table is a `data.frame`, where every row represents one record or biogeographic observation (the presence of a taxon in a sample).

```{r str}
str(bdt)
```

```{r, echo=FALSE, include=FALSE}
##### THIS CHUNK IS NOT PART OF THE TUTORIAL - this creates the summary statistics on the webpage!!!!
summ <- data.frame(
	records=nrow(bdt),
	db=length(table(bdt$db)),
	series=length(table(bdt$seriesID)), 
	samples=length(table(bdt$sampleID)), 
	taxa=length(table(bdt$analyzedTaxon)), 
	from_ma=round(max(bdt$age)/1e4)/100, 
	to_year=1950-min(bdt$age) 
)
write.csv(summ, file="../_data/summary.csv")
##### THIS CHUNK IS NOT PART OF THE TUTORIAL - this creates the summary statistics on the webpage!!!!
```

## Basic analyses

The number of time series in the database:

```{r, dbs}
length(unique(bdt$seriesID))
```

The number of records in the database: 

```{r, dbs2}
length(bdt$db)
```

The number of unique sampling locations:

```{r, dbs3}
nrow(unique(bdt[, c("long", "lat")]))
```

The oldest record (relative to 1950) in each database:
```{r, dbs4}
bdt %>% group_by(db) %>% summarize(max = max(age))
```

Finding the mean age (relative to 1950) of a sample from modern databases (BioTIME and SedTraps):
```{r, dbs5}
modern <- bdt %>%
  filter(db == "BioTIME" | db == "SedTraps") ## filtering to only modern data

mean(modern$age) 

```

Finding the mean age (relative to 1950) of a sample from fossil databases:
```{r, dbs6}
fossil <- bdt %>%
  filter(db != "BioTIME" & db != "SedTraps") ## filtering to exclude modern data

mean(fossil$age) 

```

For additional analyses and visualization, data summarization and manipulation can be done as follows:
```{r}
## this manipulation summarizes information for each unique time series
overview <- bdt %>% 
  group_by(seriesID) %>%
  dplyr::summarise(db = unique(db), ## source database
                   #environment = unique(environment), ## broadly defined environment
                   group = unique(group), ## taxonomic group
                   lat = unique(lat), ## latitude
                   long = unique(long), ## longitude
                   #abundType = unique(abundanceUnit), ## abundance type of records
                   samples = length(unique(sampleID)), ## number of samples
                   richness = length(unique(analyzedTaxon)), ## number of unique species
                   meanAge = mean(age, na.rm = TRUE), ## mean age of samples 
                   minAge = min(age, na.rm = TRUE), ## minimum age of a sample
                   maxAge = max(age, na.rm = TRUE), ## maximum age of a sample
                   extent =  maxAge - minAge) ## temporal extent (duration) of the time series
```

## Visualizing the data

Create a donut plot showing the contribution of source databases to BioDeepTime:
```{r, plot=TRUE}
## donut plot for proportion contribution of each database
databases <- overview %>%
  group_by(db) %>%
  dplyr::summarise(count = n())

# Compute percentages
databases$fraction <- databases$count / sum(databases$count)

# Compute the cumulative percentages (top of each rectangle)
databases$ymax <- cumsum(databases$fraction)

# Compute the bottom of each rectangle
databases$ymin <- c(0, head(databases$ymax, n=-1))

# Compute label position
databases$labelPosition <- (databases$ymax + databases$ymin)/2

# Compute a good label
databases$label <- paste0(databases$db, ", ", databases$count)

# # Make the plot
# ggplot(databases, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=db)) +
# 	geom_rect() +
# 	#geom_text(x=2, aes(y=labelPosition, label=label), size=6) + ## x here controls label position (inner / outer)
# 	scale_fill_manual(values = colors) +
# 	coord_polar(theta="y") +
# 	xlim(c(2, 4)) +
# 	theme_void()# +
# 	#theme(legend.position = "none") ## controls the presence of a legend

```




